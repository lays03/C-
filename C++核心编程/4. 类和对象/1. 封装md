C++面向对象的三大特性为：封装、继承、多态
C++认为万事万物都皆为对象，对象上有其属性和行为

# 4.1 封装
## 4.1.1 封装的意义
意义：
- 将属性和行为作为一个整体，表现生活中的事物
- 将属性和行为加以权限控制

### 封装意义一：
在设计类的时候，属性和行为写在一起，表现事物

语法：class 类名{   访问权限：属性 / 行为};

**设计一个圆类，求圆的周长**
```cpp
const double PI = 3.14;

class Circle{
//访问权限
//公共权限
public:
    //属性：半径
    int m_r;
    //行为：获取圆的周长
    double cacluateZC(){
        return 2 * PI * m_r;
    }
};

int main(){
    //通过圆类 创建具体的圆（对象） 实例化
    Circle c1;
    c1.m_r = 10;
    cout << "圆的周长为：" << c1.cacluateZC() << endl;
    return 0;
}
```

类中的属性和行为 统称为：**成员**<br>
属性叫做 **成员属性 成员变量**<br>
行为叫做 **成员函数 成员方法**

### 封装意义二：
类在设计时，可以把属性和行为放在不同的权限下，加以控制：

访问权限有三种：
**1. public   公共权限        类内可以访问    类外可以访问**

**2. protected    保护权限    类内可以访问    类外不可以访问**

**3. private  私有权限        类内可以访问    类外不可以访问**

```cpp
class Person{

public:
//公共权限
    string m_Name; //姓名

protected:
//保护权限
    string m_Car; //汽车

private:
//私有权限
    int m_Password;//银行卡密码

public:
    void func(){
        m_Name = "lays";
        m_Car = "Car";
        m_Password = 111;
    }

};

int main(){
    //实例化具体对象
    Person p1;
    p1.m_Name = "fang";
    p1.m_Car = "benchi"; //保护权限内容，在类外访问不到
    p1.m_Password = 222; //私有权限内容，在类外访问不到
    return 0;
}
```

## 4.1.2 struct 和 class 区别
唯一区别：**默认的访问权限不同**
区别：
- struct默认权限为公共
- class默认权限为私有

## 4.1.3 成员属性设置为私有
优点1：将所有成员属性设置为私有，可以自己控制读写权限
优点2：对于写权限，我们可以检测数据的有效性

```cpp
//成员属性设置为私有
//1、可以自己控制读写权限
//2、对于写可以检测数据有效性
class Person{
//用公有的方法对私有变量进行可读可写
public:
//设置姓名
    void setName(string name){
        m_Name = name;
    }
//获取姓名
    string getName(){
        return m_Name;
    }
//获取年龄
    int getAge(){
        return m_Age;
    }
//设置偶像
    void setIdol(string idol){
        m_Idol = idol;
    }

private:
    string m_Name; //姓名 可读可写

    int m_Age = 18; //年龄 只读

    string m_Idol; //偶像 只写

};

int main(){
    //实例化具体对象
    Person p1;
    p1.setName("lays");
    cout << "姓名为：" << p1.getName() << endl;
    cout << "年龄为：" << p1.getAge() << endl;

    return 0;
}
```